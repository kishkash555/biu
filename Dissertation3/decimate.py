import pandas as pd
import numpy as np
from numpy.fft import fft, fftshift
from scipy.signal import oaconvolve
from scipy.signal import remez


def create_lpf(n=4000,max_flatband=0.5, min_stopband=1, fs=500):
    h = remez(n+2,[0., max_flatband, min_stopband, fs/2], [1.,0.],fs=fs)
    return h[1:-1] # for some reason first and last points are bas

def pw_constant_to_dense(pc_signal_x, pc_signal_y, xx):
    # pc_signal_x: the *start point* of the segments with constant values
    # pc_signal_y: the constant values
    i = 0
    ii = 0
    yy = np.zeros(len(xx))
    while xx[ii] < pc_signal_x[i]:
        ii += 1
    xx = xx[ii:]
    yy = yy[ii:]
    ii = 0
    while ii <= len(xx)-1:
        if i < len(pc_signal_x)-1 and xx[ii] >= pc_signal_x[i+1]:
            i += 1
        yy[ii] = pc_signal_y[i]
        ii += 1
    return xx, yy


def pw_constant_convolve(pc_signal_x, pc_signal_y, pc_signal_stop, h, h_width, h_min_width, xx):
    # pc_signal_x: the *start point* of the segments with constant values
    # pc_signal_y: the constant values
    # principle: 
    # - maintain which starting points are currently relevant
    # - shift the filter and use partial cumulative sums

    yy = np.nan*np.ones_like(xx)
    seg_start = seg_end = 0
    max_seg_start = len(pc_signal_x)-2
    cum_h = np.cumsum(h)
    for i,x in enumerate(xx):
        if pc_signal_x[seg_start] > x - h_min_width:
            continue # this point cannot be caluclated
        if pc_signal_stop < x + h_min_width:
            break # any further point is out of scope
        # check if the start point is obsolete:
        while (seg_start <= max_seg_start and
            pc_signal_x[seg_start+1] <= x - h_width):
            seg_start += 1

        # check if the end point needs to be extended:
        while (seg_end <= max_seg_start 
            and pc_signal_x[seg_end+1] < x + h_width):
            seg_end += 1

        rel_sig_x = pc_signal_x[seg_start:seg_end+1] - x
        rel_sig_y = pc_signal_y[seg_start:seg_end+1]

        yy[i] = pw_sumproduct(rel_sig_x,rel_sig_y,cum_h,h_width, pc_signal_stop)
    return yy


def pw_sumproduct(sig_x, sig_y, cum_h, h_width, pc_signal_stop):
    h_period = h_width / np.floor(len(cum_h)/2)
    
    # h is even: h goes from -h_width
    sig_x_as_h_index = (sig_x + h_width)/h_period
    sig_x_as_h_index = np.around(sig_x_as_h_index,3).astype(int)
    sig_stop_as_h_index = (pc_signal_stop + h_width)/h_period
    sig_stop_as_h_index = np.around(sig_stop_as_h_index,3).astype(int)

    add_initial_ele = sig_x_as_h_index[0] < 1 
    if add_initial_ele:
        sig_x_as_h_index[0] = 1
    
    if len(sig_x_as_h_index) >=2:
        pw_h = cum_h[sig_x_as_h_index[1:]-1] - cum_h[sig_x_as_h_index[:-1]-1] 
        pw_h[0] += cum_h[0]*add_initial_ele
        contrib_by_segment = pw_h*sig_y[:-1]
    else:
        pw_h = np.array([cum_h[0]*add_initial_ele])
        contrib_by_segment = pw_h * sig_y[0]
        
    contrib_last_segment = sig_y[-1] * (
        cum_h[min(len(cum_h)-1, sig_stop_as_h_index)] - cum_h[sig_x_as_h_index[-1]-1]
        )
    total = contrib_by_segment.sum() + contrib_last_segment

    return total



def test_pw_constant_convlve():
    #sig_x = np.array([0.2,0.3,0.5,0.8,1.1,1.3,1.6])
    #sig_y = np.ones(len(sig_x))
    sig_x = np.arange(0,6,0.5) 
    sig_y = np.array([0, 1]*6)
    h = np.hamming(50)
    t = pw_constant_convolve(sig_x, sig_y, 1.9, h, 0.2, 0.2, np.arange(0.,2., 0.25))    
    print(sum(h),t)


def test_pw_constant_to_dense():
    x = np.array([305.078, 305.934, 306.72 , 307.462, 308.246, 309.066, 309.944,
        310.752, 311.474, 312.202])
    y = np.array([0.856, 0.786, 0.742, 0.784, 0.82 , 0.878, 0.808, 0.722, 0.728,
        0.338])
    pw_constant_to_dense(x,y,np.arange(312.190,312.208,0.002))

def test_pw_constant2():
    x, y = get_x2()
    f3 = remez(4000,[0., 0.5, 1., 250.],[1.,0.],fs=500)
    x_pw = np.arange(0,318.004,0.5)
    pw_constant_convolve(x,y,318.004, f3, 4, 3, x_pw )


def test_pw_constant3():
    x, y = get_x3()
    f3 = remez(4000,[0., 0.5, 1., 250.],[1.,0.],fs=500)
    x_pw = np.arange(0.51,313,0.25)
    y_pw = pw_constant_convolve(x, y, 312.54, f3, 4, 4, x_pw )





def get_x2():
    return np.array([7.00000e-02, 8.26000e-01, 1.55800e+00, 2.28200e+00, 3.08200e+00,
       3.86400e+00, 4.56800e+00, 5.27400e+00, 6.04400e+00, 6.85000e+00,
       7.65400e+00, 8.48000e+00, 9.35200e+00, 1.02380e+01, 1.10500e+01,
       1.19000e+01, 1.27320e+01, 1.34840e+01, 1.42900e+01, 1.51140e+01,
       1.59640e+01, 1.67780e+01, 1.76540e+01, 1.85560e+01, 1.94360e+01,
       2.03240e+01, 2.12380e+01, 2.21220e+01, 2.29740e+01, 2.38540e+01,
       2.47480e+01, 2.55840e+01, 2.64540e+01, 2.73440e+01, 2.81940e+01,
       2.90680e+01, 2.99460e+01, 3.07680e+01, 3.16040e+01, 3.24420e+01,
       3.32720e+01, 3.40480e+01, 3.48200e+01, 3.56060e+01, 3.63720e+01,
       3.71620e+01, 3.79900e+01, 3.88060e+01, 3.95700e+01, 4.03640e+01,
       4.11880e+01, 4.19360e+01, 4.26780e+01, 4.34420e+01, 4.42480e+01,
       4.50480e+01, 4.58520e+01, 4.65980e+01, 4.74000e+01, 4.81920e+01,
       4.90260e+01, 4.98320e+01, 5.06680e+01, 5.15120e+01, 5.23760e+01,
       5.32680e+01, 5.41060e+01, 5.49340e+01, 5.57680e+01, 5.65840e+01,
       5.73700e+01, 5.81900e+01, 5.90440e+01, 5.98640e+01, 6.06760e+01,
       6.15200e+01, 6.23240e+01, 6.30980e+01, 6.39140e+01, 6.47780e+01,
       6.56940e+01, 6.65640e+01, 6.74400e+01, 6.83200e+01, 6.91800e+01,
       7.00160e+01, 7.08740e+01, 7.17560e+01, 7.26080e+01, 7.34440e+01,
       7.43040e+01, 7.51800e+01, 7.60800e+01, 7.68940e+01, 7.76680e+01,
       7.84520e+01, 7.92440e+01, 8.00040e+01, 8.07640e+01, 8.15500e+01,
       8.23560e+01, 8.31540e+01, 8.39400e+01, 8.47500e+01, 8.55820e+01,
       8.64160e+01, 8.72320e+01, 8.80720e+01, 8.89440e+01, 8.98460e+01,
       9.07380e+01, 9.16700e+01, 9.26300e+01, 9.35640e+01, 9.44460e+01,
       9.53280e+01, 9.62160e+01, 9.70740e+01, 9.79120e+01, 9.87780e+01,
       9.96860e+01, 1.00568e+02, 1.01428e+02, 1.02308e+02, 1.03202e+02,
       1.04048e+02, 1.04930e+02, 1.05814e+02, 1.06632e+02, 1.07424e+02,
       1.08258e+02, 1.09110e+02, 1.09928e+02, 1.10760e+02, 1.11602e+02,
       1.12400e+02, 1.13190e+02, 1.13996e+02, 1.14820e+02, 1.15612e+02,
       1.16402e+02, 1.17224e+02, 1.18074e+02, 1.18902e+02, 1.19756e+02,
       1.20656e+02, 1.21542e+02, 1.22356e+02, 1.23168e+02, 1.23986e+02,
       1.24768e+02, 1.25512e+02, 1.26246e+02, 1.27020e+02, 1.27860e+02,
       1.28682e+02, 1.29522e+02, 1.30394e+02, 1.31240e+02, 1.32034e+02,
       1.32854e+02, 1.33684e+02, 1.34482e+02, 1.35282e+02, 1.36120e+02,
       1.36964e+02, 1.37772e+02, 1.38604e+02, 1.39436e+02, 1.40272e+02,
       1.41066e+02, 1.41886e+02, 1.42728e+02, 1.43546e+02, 1.44396e+02,
       1.45270e+02, 1.46122e+02, 1.47000e+02, 1.47884e+02, 1.48736e+02,
       1.49584e+02, 1.50130e+02]),  np.array([ 
         0.756,   0.732,   0.724,   0.8  ,   0.782,   0.704,   0.706,
         0.77 ,   0.806,   0.804,   0.826,   0.872,   0.886,   0.812,
         0.85 ,   0.832,   0.752,   0.806,   0.824,   0.85 ,   0.814,
         0.876,   0.902,   0.88 ,   0.888,   0.914,   0.884,   0.852,
         0.88 ,   0.894,   0.836,   0.87 ,   0.89 ,   0.85 ,   0.874,
         0.878,   0.822,   0.836,   0.838,   0.83 ,   0.776,   0.772,
         0.786,   0.766,   0.79 ,   0.828,   0.816,   0.764,   0.794,
         0.824,   0.748,   0.742,   0.764,   0.806,   0.8  ,   0.804,
         0.746,   0.802,   0.792,   0.834,   0.806,   0.836,   0.844,
         0.864,   0.892,   0.838,   0.828,   0.834,   0.816,   0.786,
         0.82 ,   0.854,   0.82 ,   0.812,   0.844,   0.804,   0.774,
         0.816,   0.864,   0.916,   0.87 ,   0.876,   0.88 ,   0.86 ,
         0.836,   0.858,   0.882,   0.852,   0.836,   0.86 ,   0.876,
         0.9  ,   0.814,   0.774,   0.784,   0.792,   0.76 ,   0.76 ,
         0.786,   0.806,   0.798,   0.786,   0.81 ,   0.832,   0.834,
         0.816,   0.84 ,   0.872,   0.902,   0.892,   0.932,   0.96 ,
         0.934,   0.882,   0.882,   0.888,   0.858,   0.838,   0.866,
         0.908,   0.882,   0.86 ,   0.88 ,   0.894,   0.846,   0.882,
         0.884,   0.818,   0.792,   0.834,   0.852,   0.818,   0.832,
         0.842,   0.798,   0.79 ,   0.806,   0.824,   0.792,   0.79 ,
         0.822,   0.85 ,   0.828,   0.854,   0.9  ,   0.886,   0.814,
         0.812,   0.818,   0.782,   0.744,   0.734,   0.774,   0.84 ,
         0.822,   0.84 ,   0.872,   0.846,   0.794,   0.82 ,   0.83 ,
         0.798,   0.8  ,   0.838,   0.844,   0.808,   0.832,   0.832,
         0.836,   0.794,   0.82 ,   0.842,   0.818,   0.85 ,   0.874,
         0.852,   0.878,   0.884,   0.852,   0.848,   0.546, 167.874])

def get_x3():
    return np.array([  0.51 ,   1.388,   2.254,   3.134,   3.972,   4.81 ,   5.666,
         6.48 ,   7.296,   8.128,   8.904,   9.69 ,  10.484,  11.284,
        12.036,  12.75 ,  13.47 ,  14.228,  14.968,  15.708,  16.484,
        17.262,  17.998,  18.746,  19.502,  20.214,  20.912,  21.626,
        22.372,  23.094,  23.836,  24.6  ,  25.342,  26.084,  26.842,
        27.586,  28.3  ,  29.02 ,  29.734,  30.43 ,  31.114,  31.81 ,
        32.542,  33.29 ,  34.028,  34.784,  35.538,  36.26 ,  36.998,
        37.718,  38.416,  39.104,  39.808,  40.546,  41.28 ,  42.02 ,
        42.774,  43.516,  44.242,  45.012,  45.822,  46.586,  47.308,
        48.03 ,  48.716,  49.376,  50.018,  50.644,  51.258,  51.854,
        52.45 ,  53.04 ,  53.656,  54.308,  54.974,  55.662,  56.372,
        57.1  ,  57.81 ,  58.516,  59.332,  60.22 ,  61.114,  61.944,
        62.746,  63.464,  64.144,  64.814,  65.532,  66.416,  67.31 ,
        68.224,  69.136,  70.016,  70.866,  71.664,  72.464,  73.272,
        74.022,  74.796,  75.594,  76.374,  77.134,  77.892,  78.588,
        79.266,  79.928,  80.6  ,  81.268,  81.922,  82.596,  83.284,
        83.972,  84.654,  85.342,  86.056,  86.854,  87.682,  88.46 ,
        89.258,  90.082,  90.838,  91.602,  92.388,  93.144,  93.882,
        94.65 ,  95.43 ,  96.182,  96.934,  97.638,  98.34 ,  99.03 ,
        99.714, 100.394, 101.05 , 101.692, 102.32 , 102.942, 103.568,
       104.21 , 104.924, 105.706, 106.466, 107.206, 107.926, 108.614,
       109.338, 110.064, 110.78 , 111.468, 112.182, 112.878, 113.574,
       114.364, 115.306, 116.154, 116.98 , 117.828, 118.624, 119.39 ,
       120.17 , 120.942, 121.7  , 122.452, 123.19 , 123.936, 124.686,
       125.452, 126.162, 126.844, 127.502, 128.14 , 128.768, 129.39 ,
       130.018, 130.702, 131.396, 132.376, 133.368, 134.306, 135.208,
       135.984, 136.728, 137.512, 138.468, 139.412, 140.272, 141.136,
       142.078, 142.968, 143.798, 144.6  , 145.35 , 146.118, 146.998,
       147.806, 148.666, 149.53 , 150.296, 151.108, 151.916, 152.656,
       153.402, 154.16 , 154.904, 155.67 , 156.448, 157.204, 157.99 ,
       158.824, 159.626, 160.428, 161.238, 161.984, 162.744, 163.506,
       164.236, 164.998, 165.758, 166.484, 167.172, 167.822, 168.474,
       169.124, 169.8  , 170.506, 171.238, 172.004, 172.752, 173.546,
       174.314, 175.086, 175.852, 176.6  , 177.288, 177.948, 178.588,
       179.216, 179.832, 180.452, 181.082, 181.712, 182.38 , 183.082,
       183.804, 184.53 , 185.242, 185.914, 186.586, 187.28 , 187.968,
       188.646, 189.38 , 190.144, 190.848, 191.61 , 192.378, 193.114,
       193.878, 194.656, 195.402, 196.144, 196.944, 197.744, 198.526,
       199.342, 200.164, 200.926, 201.716, 202.496, 203.236, 203.936,
       204.6  , 205.264, 205.94 , 206.624, 207.288, 207.936, 208.576,
       209.236, 209.98 , 210.724, 211.434, 212.172, 212.964, 213.748,
       214.484, 215.194, 215.896, 216.602, 217.368, 218.342, 219.238,
       220.076, 220.852, 221.578, 222.298, 223.038, 223.964, 224.902,
       225.826, 226.704, 227.464, 228.26 , 229.108, 229.876, 230.624,
       231.326, 232.016, 232.694, 233.384, 234.074, 234.808, 235.678,
       236.46 , 237.27 , 238.14 , 238.9  , 239.688, 240.466, 241.222,
       242.012, 242.816, 243.584, 244.378, 245.17 , 245.95 , 246.758,
       247.546, 248.34 , 249.146, 249.914, 250.692, 251.47 , 252.208,
       252.962, 253.718, 254.44 , 255.18 , 255.882, 256.562, 257.228,
       257.936, 258.718, 259.512, 260.27 , 261.066, 261.844, 262.622,
       263.396, 264.184, 264.942, 265.692, 266.462, 267.236, 267.994,
       268.768, 269.55 , 270.304, 271.098, 271.88 , 272.624, 273.38 ,
       274.148, 274.884, 275.628, 276.4  , 277.17 , 277.932, 278.708,
       279.47 , 280.19 , 280.928, 281.68 , 282.396, 283.13 , 283.854,
       284.548, 285.222, 285.88 , 286.538, 287.21 , 287.944, 288.662,
       289.386, 290.146, 290.876, 291.56 , 292.214, 292.86 , 293.502,
       294.186, 295.086, 296.038, 296.992, 297.784, 298.544, 299.354,
       300.206, 300.98 , 301.726, 302.57 , 303.374, 304.218, 305.078,
       305.934, 306.72 , 307.462, 308.246, 309.066, 309.944, 310.752,
       311.474, 312.202]), np.array([
           0.878, 0.866, 0.88 , 0.838, 0.838, 0.856, 0.814, 0.816, 0.832,
       0.776, 0.786, 0.794, 0.8  , 0.752, 0.714, 0.72 , 0.758, 0.74 ,
       0.74 , 0.776, 0.778, 0.736, 0.748, 0.756, 0.712, 0.698, 0.714,
       0.746, 0.722, 0.742, 0.764, 0.742, 0.742, 0.758, 0.744, 0.714,
       0.72 , 0.714, 0.696, 0.684, 0.696, 0.732, 0.748, 0.738, 0.756,
       0.754, 0.722, 0.738, 0.72 , 0.698, 0.688, 0.704, 0.738, 0.734,
       0.74 , 0.754, 0.742, 0.726, 0.77 , 0.81 , 0.764, 0.722, 0.722,
       0.686, 0.66 , 0.642, 0.626, 0.614, 0.596, 0.596, 0.59 , 0.616,
       0.652, 0.666, 0.688, 0.71 , 0.728, 0.71 , 0.706, 0.816, 0.888,
       0.894, 0.83 , 0.802, 0.718, 0.68 , 0.67 , 0.718, 0.884, 0.894,
       0.914, 0.912, 0.88 , 0.85 , 0.798, 0.8  , 0.808, 0.75 , 0.774,
       0.798, 0.78 , 0.76 , 0.758, 0.696, 0.678, 0.662, 0.672, 0.668,
       0.654, 0.674, 0.688, 0.688, 0.682, 0.688, 0.714, 0.798, 0.828,
       0.778, 0.798, 0.824, 0.756, 0.764, 0.786, 0.756, 0.738, 0.768,
       0.78 , 0.752, 0.752, 0.704, 0.702, 0.69 , 0.684, 0.68 , 0.656,
       0.642, 0.628, 0.622, 0.626, 0.642, 0.714, 0.782, 0.76 , 0.74 ,
       0.72 , 0.688, 0.724, 0.726, 0.716, 0.688, 0.714, 0.696, 0.696,
       0.79 , 0.942, 0.848, 0.826, 0.848, 0.796, 0.766, 0.78 , 0.772,
       0.758, 0.752, 0.738, 0.746, 0.75 , 0.766, 0.71 , 0.682, 0.658,
       0.638, 0.628, 0.622, 0.628, 0.684, 0.694, 0.98 , 0.992, 0.938,
       0.902, 0.776, 0.744, 0.784, 0.956, 0.944, 0.86 , 0.864, 0.942,
       0.89 , 0.83 , 0.802, 0.75 , 0.768, 0.88 , 0.808, 0.86 , 0.864,
       0.766, 0.812, 0.808, 0.74 , 0.746, 0.758, 0.744, 0.766, 0.778,
       0.756, 0.786, 0.834, 0.802, 0.802, 0.81 , 0.746, 0.76 , 0.762,
       0.73 , 0.762, 0.76 , 0.726, 0.688, 0.65 , 0.652, 0.65 , 0.676,
       0.706, 0.732, 0.766, 0.748, 0.794, 0.768, 0.772, 0.766, 0.748,
       0.688, 0.66 , 0.64 , 0.628, 0.616, 0.62 , 0.63 , 0.63 , 0.668,
       0.702, 0.722, 0.726, 0.712, 0.672, 0.672, 0.694, 0.688, 0.678,
       0.734, 0.764, 0.704, 0.762, 0.768, 0.736, 0.764, 0.778, 0.746,
       0.742, 0.8  , 0.8  , 0.782, 0.816, 0.822, 0.762, 0.79 , 0.78 ,
       0.74 , 0.7  , 0.664, 0.664, 0.676, 0.684, 0.664, 0.648, 0.64 ,
       0.66 , 0.744, 0.744, 0.71 , 0.738, 0.792, 0.784, 0.736, 0.71 ,
       0.702, 0.706, 0.766, 0.974, 0.896, 0.838, 0.776, 0.726, 0.72 ,
       0.74 , 0.926, 0.938, 0.924, 0.878, 0.76 , 0.796, 0.848, 0.768,
       0.748, 0.702, 0.69 , 0.678, 0.69 , 0.69 , 0.734, 0.87 , 0.782,
       0.81 , 0.87 , 0.76 , 0.788, 0.778, 0.756, 0.79 , 0.804, 0.768,
       0.794, 0.792, 0.78 , 0.808, 0.788, 0.794, 0.806, 0.768, 0.778,
       0.778, 0.738, 0.754, 0.756, 0.722, 0.74 , 0.702, 0.68 , 0.666,
       0.708, 0.782, 0.794, 0.758, 0.796, 0.778, 0.778, 0.774, 0.788,
       0.758, 0.75 , 0.77 , 0.774, 0.758, 0.774, 0.782, 0.754, 0.794,
       0.782, 0.744, 0.756, 0.768, 0.736, 0.744, 0.772, 0.77 , 0.762,
       0.776, 0.762, 0.72 , 0.738, 0.752, 0.716, 0.734, 0.724, 0.694,
       0.674, 0.658, 0.658, 0.672, 0.734, 0.718, 0.724, 0.76 , 0.73 ,
       0.684, 0.654, 0.646, 0.642, 0.684, 0.9  , 0.952, 0.954, 0.792,
       0.76 , 0.81 , 0.852, 0.774, 0.746, 0.844, 0.804, 0.844, 0.86 ,
       0.856, 0.786, 0.742, 0.784, 0.82 , 0.878, 0.808, 0.722, 0.728,
       0.338])


if __name__ == "__main__":
    test_pw_constant3()
